自动网络检测：
# gentoo    //加载光盘系统
# ifconfig       //检查本地IP
# ping -c 3 www.gentoo.org      //测试网络是否可用
=============================================================================================================
设置Root密码：
# passwd    //这里设置ssh root登陆密码
# /etc/init.d/sshd start    //启动ssh服务
=============================================================================================================
磁盘进行分区使用fdisk对磁盘进行分区：
# fdisk /dev/sda    //重装不需要执行
=============================================================================================================
p = 查看分区（查看分区情况）
n = 新建分区（p主分区，e逻辑分区，两次回车后输入分区大小：+1024M）
d = 删除分区（选择要删除的分区号，回车确定）
t = 设置分区类型（选择需要设置的分区号，回车后敲击“82”创建swap分区）
w = 保存分区并退出
=============================================================================================================
为分区应用文件系统：
# mkfs.ext2 /dev/sdb3   ( /boot )    //SSD固态硬盘
# mkfs.ext4 /dev/sdb2   ( / )    //SSD固态硬盘
# mkswap /dev/sda1   //激活swap分区
# swapon /dev/sda1   //激活swap分区
# mkfs.ext4 /dev/sdb4   ( /var )   //sda2是拓展分区占位符
# mkfs.ext4 /dev/sda6   ( /home )     //如果重装又不想格式化，不要执行这句
=============================================================================================================
# mount /dev/sdb2 /mnt/gentoo    ( / )
# mkdir /mnt/gentoo/boot     //创建boot目录
# mount /dev/sdb3 /mnt/gentoo/boot    ( /boot )
# mkdir /mnt/gentoo/var     //创建var目录
# mount /dev/sdb4 /mnt/gentoo/var    ( /var )
=============================================================================================================
下载Stage3阶段包：
# cd /mnt/gentoo
# wget http://.../stage3-amd64-systemd-20160918.tar.bz2
# tar xvjpf stage3-amd64-systemd-20160918.tar.bz2 --xattrs
=============================================================================================================
# nano -w /mnt/gentoo/etc/portage/make.conf
=============================================================================================================
CFLAGS="-march=native -O2 -pipe"
CXXFLAGS="${CFLAGS}"
MAKEOPTS="-j5"
VIDEO_CARDS="amdgpu radeonsi"
INPUT_DEVICES="libinput"
=============================================================================================================
选择境像站点:
# mirrorselect -i -o >> /mnt/gentoo/etc/portage/make.conf      //选择比较快的源镜像站点
# mkdir /mnt/gentoo/etc/portage/repos.conf     //创建repos.conf文件夹
# cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf
# nano -w /mnt/gentoo/etc/portage/repos.conf/gentoo.conf     //可选
=============================================================================================================
sync-uri = rsync://rsync.cn.gentoo.org/gentoo-portage/
=============================================================================================================
挂载必要的文件系统:
# mount -t proc proc /mnt/gentoo/proc
# mount --rbind /sys /mnt/gentoo/sys
# mount --make-rslave /mnt/gentoo/sys
# mount --rbind /dev /mnt/gentoo/dev
# mount --make-rslave /mnt/gentoo/dev
进入新环境:
# chroot /mnt/gentoo /bin/bash     //使用chroot将根位置从/（在安装媒介里）更改成/mnt/gentoo/（在分区里）
# source /etc/profile     //使用source命令将一些设置（那些在/etc/profile中的）重新载入到内存中
# export PS1="(chroot) $PS1"     //更改主提示符来帮助我们记住当前会话在一个chroot环境里面
=============================================================================================================
# date 032916212014    （格式：月-日-时-分-年）
=============================================================================================================
# nano -w /etc/resolv.conf     //设置DNS解析服务器
=============================================================================================================
nameserver 114.114.114.114     //可以设置成路由器服务IP地址【例：192.168.2.1】
=============================================================================================================
安装Portage快照
# emerge-webrsync     //这里需要等待一会，如果不能更新请检查网络
更新Portage树：
# emerge --sync     //可选步骤，更新Portage树
选择正确的配置文件：
# eselect profile list     //查看配置文件列表
# eselect profile set 5     //设置需要的配置文件
配置USE变量：
# nano -w /etc/portage/make.conf     //警告：全局USE设置需要慎重，大多问题都是出自于这里。
=============================================================================================================
USE="gtk gnome wayland xft -qt4 -kde qt5 gtkstyle alsa amdgpu pcre16 mmx sse sse2 upnp-av"
LINGUAS="zh_CN"
PORTDIR_OVERLAY="${PORTDIR} ${PORTDIR_OVERLAY}"
=============================================================================================================
配置时区：
# ls /usr/share/zoneinfo
# echo "Asia/Shanghai" > /etc/timezone
# emerge --config sys-libs/timezone-data
# nano -w /etc/locale.gen
=============================================================================================================
en_US ISO-8859-1
en_US.UTF-8 UTF-8
zh_CN UTF-8
zh_CN.GBK GBK
zh_CN.GB2312 GB2312
zh_CN.GB18030 GB18030
=============================================================================================================
# locale-gen
# nano -w /etc/env.d/02locale
=============================================================================================================
LANG="zh_CN.UTF-8"
=============================================================================================================
现在重新加载环境：
# env-update && source /etc/profile && export PS1="(chroot) $PS1"
=============================================================================================================
安装最新内核源码:
# echo "=sys-kernel/gentoo-sources-4.19.37" >> /etc/portage/package.keywords
# emerge --ask sys-kernel/gentoo-sources
=============================================================================================================
# emerge --ask sys-apps/pciutils
# emerge --ask sys-kernel/linux-firmware     //这里设置【USE="savedconfig"】
# ln -sf /proc/self/mounts /etc/mtab     //创建mtab链接文件
# emerge --ask sys-kernel/dracut
=============================================================================================================
手动配置内核:【默认推荐】     //即使在默认配置基础上只添加也会出问题的，而且问题难以琢磨，即使编译没有错误。
# cd /usr/src/linux
# make menuconfig     //这里需要保存配置文件
=============================================================================================================
# make && make modules_install
# make install
=============================================================================================================
使用【Genkernel】配置内核：【本人推荐】
# emerge --ask sys-kernel/genkernel-next
# nano -w /etc/genkernel.conf
=============================================================================================================
UDEV="yes"
FIRMWARE_DIR="/lib/firmware"
=============================================================================================================
# genkernel --menuconfig --install all     //在Genkernel的基础上修改，可防止错误配置导致内核启动失败。（推荐）
=============================================================================================================
Gentoo Linux --->
    Support for init systems, system and service managers --->
        [*] systemd
[*] Virtualization  --->
    <*> Kernel-based Virtual Machine (KVM) support
    <M> KVM for Intel processors support
    <*> Host kernel accelerator for virtio net
Device Drivers  --->
    Multimedia support  --->
        [*] Cameras/video grabbers support
        [*] Media Controller API
        [*] V4L2 sub-device userspace API
        [*] Media USB Adapters  --->
            <M> USB Video Class (UVC)
            [*] UVC input events device support
            <M> CPiA2 Video For Linux
        [*] V4L platform devices  --->
        [*] Autoselect pertinent encoders/decoders and other helper chips
    USB support  --->
        <*> OHCI HCD support
        <*> UHCI HCD (most Intel and VIA) support
    Input Device support -->
        <*> Event interface
        [*] Miscellaneous devices -->
            <*> User level driver support
    <*> Sound card support
        <*> Advanced Linux Sound Architecture --->
            USB sound devices -->
                <*> USB Audio/MIDI driver
            HD-Audio  --->
                // 声卡Realtek ALC1150
                [*] Build Realtek HD-audio codec support
                [*] Build Silicon Labs 3054 HD-modem codec support
                [*] Enable generic HD-audio codec parser
                [*] Support initialization patch loading for HD-audio
                <*> whatever audio codec your soundcard needs
                <*> Build HDMI/DisplayPort HD-audio codec support
            (4096) Pre-allocated buffer size for HD-audio driver
            [*] Dynamic device file minor numbers
            (32) Max number of sound cards
    [*] Network device support  --->
        -*-  Ethernet driver support  --->
            [*] Intel devices
                // 网卡Intel I219-V
                <M> Intel(R) PRO/100+ support
                <M> Intel(R) PRO/1000 Gigabit Ethernet support
                <M> Intel(R) PRO/1000 PCI-Express Gigabit Ethernet support
                [*] Support HW cross-timestamp on PCH devices
                <M> Intel(R) 82575/82576 PCI-Express Gigabit Ethernet support
                [*] Intel(R) PCI-Express Gigabit adapters HWMON support
                [*] Direct Cache Access (DCA) Support
                <M> Intel(R) 82576 Virtual Function Ethernet support
                <M> Intel(R) PRO/10GbE support
                <M> Intel(R) 10GbE PCI Express adapters support
                [*] Intel(R) 10GbE PCI Express adapters HWMON support
                [*] Direct Cache Access (DCA) Support
                [*] Data Center Bridging (DCB) Support
                <M> Intel(R) 10GbE PCI Express Virtual Function Ethernet support
                <M> Intel(R) Ethernet Controller XL710 Family support
                <M> Intel(R) Ethernet Adaptive Virtual Function support
                <M> Intel(R) FM10000 Ethernet Switch Host Interface Support
            [*] Network core driver support
            <*> Universal TUN/TAP device driver support
            <M> PPP (point-to-point protocol) support
                <M> PPP BSD-Compress compression
                <M> PPP Deflate compression
                <M> PPP MPPE compression (encryption)
                <M> PPP over Ethernet
                <M> PPP support for async serial ports
                <M> PPP support for sync tty ports
    Graphics support  --->
        <M> Direct Rendering Manager (XFree86 4.1.0 and higher DRI support) --->
            [*] Enable legacy fbdev support for your modesetting driver
        < > ATI Radeon
        <M> AMD GPU
            [*] Enable amdgpu support for SI parts
            [*] Enable amdgpu support for CIK parts
            [*] Enable AMD powerplay component  
            ACP (Audio CoProcessor) Configuration  --->
                [*] Enable AMD Audio CoProcessor IP support (CONFIG_DRM_AMD_ACP)
            Display Engine Configuration  --->
                [*] AMD DC - Enable new display engine
                [*] DC support for Polaris and older ASICs
                    (only needed for Polaris, Carrizo, Tonga, Bonaire, Hawaii)
                [*] AMD FBC - Enable Frame Buffer Compression
                [*] DCN 1.0 Raven family
                    (only needed for Vega RX as part of Raven Ridge APUs)
        <*/M> HSA kernel driver for AMD GPU devices
    Generic Driver Options  --->
        [*] Maintain a devtmpfs filesystem to mount at /dev
        [*] Include in-kernel firmware blobs in kernel binary
        (amdgpu/polaris10_ce.bin amdgpu/polaris10_k_smc.bin amdgpu/polaris10_mc.bin amdgpu/polaris10_me.bin amdgpu/polaris10_mec2.bin amdgpu/polaris10_mec.bin amdgpu/polaris10_pfp.bin amdgpu/polaris10_rlc.bin amdgpu/polaris10_sdma1.bin amdgpu/polaris10_sdma.bin amdgpu/polaris10_smc.bin amdgpu/polaris10_smc_sk.bin amdgpu/polaris10_uvd.bin amdgpu/polaris10_vce.bin amdgpu/polaris10_ce_2.bin amdgpu/polaris10_me_2.bin amdgpu/polaris10_mec_2.bin amdgpu/polaris10_pfp_2.bin amdgpu/polaris10_mec2_2.bin)    // 这里回车输入括号内容
        (/lib/firmware) Firmware blobs root directory    // 这里回车输入括号内容
[*] Networking support --->
    <M> Bluetooth subsystem support --->
        [*] Bluetooth Classic (BR/EDR) features
        <*> RFCOMM protocol support
        [ ] RFCOMM TTY support
        < > BNEP protocol support
        [ ] Multicast filter support
        [ ] Protocol filter support
        <*> HIDP protocol support
        [*] Bluetooth High Speed (HS) features
        [*] Bluetooth Low Energy (LE) features
            Bluetooth device drivers --->
            <M> HCI USB driver
            <M> HCI UART driver
    <*> RF switch subsystem support --->
    Device Drivers --->
        HID support --->
        <*> User-space I/O driver support for HID subsystem
File systems  --->
    <*> Second extended fs support
        [*] Ext2 extended attributes
        [*] Ext2 POSIX Access Control Lists (NEW)
        [*] Ext2 Security Labels (NEW)
    <*> Btrfs filesystem
    DOS/FAT/NT Filesystems  --->
        (936) Default codepage for FAT
        (utf8) Default iocharset for FAT
        [*] Enable FAT UTF-8 option by default
        <*> NTFS file system support
        <*> NTFS write support
    <*> FUSE (Filesystem in Userspace) support
    <*> Kernel automounter version 4 support (also supports v3)
    Pseudo filesystems  --->
        [*] Tmpfs virtual memory file system support (former shm fs)
        [*] Tmpfs POSIX Access Control Lists
        [*] Tmpfs extended attributes
        [*] /proc file system support
        [*] sysfs file system support
    [*] Inotify support for userspace
    <*> The Extended 4 (ext4) filesystem
    [*] Ext4 POSIX Access Control Lists
    [*] Ext4 Security Labels
=============================================================================================================
# ls /boot/kernel* /boot/initramfs*
=============================================================================================================
配置/boot挂载点：
# nano -w /etc/fstab
=============================================================================================================
/dev/sdb3   /boot   ext2    noauto,noatime   1 2
/dev/sdb2   /       ext4    noatime          0 1
/dev/sda1   none    swap    sw               0 0
/dev/sdb4   /var    ext4    defaults         0 2
/dev/sda6   /home   ext4    defaults         0 2
=============================================================================================================
更新@world集合：（更新系统）
# emerge --ask --update --deep --newuse @world
# emerge --deselect sys-fs/udev     //卸载udev依赖
安装后的设置：
# systemd-machine-id-setup
# nano -w /etc/locale.conf
=============================================================================================================
LANG="zh_CN.utf8"
=============================================================================================================
# nano -w /etc/systemd/network/50-dhcp.network
=============================================================================================================
[Match]
Name=enp0s31f6

[Network]
DHCP=yes
=============================================================================================================
系统守护进程管理网络配置:
# systemctl enable systemd-networkd.service
# systemctl start systemd-networkd.service
# systemctl enable sshd.service
# systemctl start sshd.service
设置SSH远程登陆权限：
# nano -w /etc/ssh/sshd_config
=============================================================================================================
Port 22
PermitRootLogin yes
=============================================================================================================
# systemctl start systemd-resolved.service
# systemctl enable systemd-resolved.service
=============================================================================================================
设置Root密码：
# passwd
网络工具：
# emerge --ask net-misc/dhcpcd
# systemctl enable dhcpcd.service
# systemctl start dhcpcd.service
系统日志：
# emerge --ask app-admin/syslog-ng
# systemctl enable syslog-ng.service
# systemctl start syslog-ng.service
安装GRUB2引导程序：
# emerge --ask --update --newuse --verbose sys-boot/grub:2
# emerge --ask sys-boot/os-prober    //自动识别并添加Windows引导
# emerge --ask sys-fs/ntfs3g     //安装NTFS文件系统支持
# grub-install /dev/sdb    //安装引导程序到硬盘（SSD固态硬盘）
# nano -w /etc/default/grub
=============================================================================================================
GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd"
GRUB_TIMEOUT=60
=============================================================================================================
# grub-mkconfig -o /boot/grub/grub.cfg    //自动生成配置文件
安装完成退出安装环境：
# exit
# cd
# umount -l /mnt/gentoo/dev{/shm,/pts,}
# umount /mnt/gentoo{/boot,/sys,/proc,}
# reboot
=============================================================================================================
设置主机名、中文编码、键盘等。
# hostnamectl set-hostname Gentoo
# localectl set-locale LANG=zh_CN.utf8
# localectl set-keymap en_US
# localectl set-x11-keymap en_US
Root登陆后设置用户及密码：
# useradd -m -G users,wheel,audio -s /bin/bash lhjok
# passwd lhjok
=============================================================================================================
安装Guix软件包管理器：
# emerge --ask sys-apps/guix      //GUN Guix软件包管理器
# systemctl enable guix-daemon.service      //开机启动守护进程
# nano -w /etc/profile      //配置全局环境变量
=============================================================================================================
export GTK_IM_MODULE=ibus
export QT_IM_MODULE=ibus
export XMODIFIERS=@im=ibus

export GOPATH=$HOME/.golang
export PATH=$PATH:$GOPATH/bin:$HOME/.config/guix/current/bin:$PATH:$HOME/.cargo/bin
export INFOPATH="$HOME/.config/guix/current/share/info:$INFOPATH"
=============================================================================================================
guix install glibc-locales     //安装语言环境(非特权用户执行)
guix install font-adobe-source-han-sans:cn     //安装中文字体(非特权用户执行)
//不要轻易执行：(guix gc)进行垃圾清理，否则每次安装软件，都要重复安装依赖包。
=============================================================================================================
rm -rf ~/.local/share/applications
rm -rf ~/.local/share/icons
ln -s ~/.guix-profile/share/applications ~/.local/share/applications
ln -s ~/.guix-profile/share/icons ~/.local/share/icons
sudo ln -s ~/.local/share/fonts ~/.guix-profile/share/fonts
sudo rm -f /var/guix/profiles/per-user/lhjok/current-guix
sudo ln -sf /var/guix/profiles/per-user/lhjok/guix-profile /var/guix/profiles/per-user/lhjok/current-guix
=============================================================================================================
$ nano -w ~/.bash_profile
export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale
GUIX_PROFILE="$HOME/.guix-profile" ; \
source "$HOME/.guix-profile/etc/profile"
=============================================================================================================
安装GNOME桌面环境：
# emerge --ask --update --deep --newuse @world
# emerge --ask gnome-base/gnome-light     //这里可能需设置【USE="-qt4 -qt5"】与GTK相冲突
# systemctl enable NetworkManager      //开机启动网络管理器
# emerge --ask media-fonts/source-han-sans     //安装思源中文字体
# emerge --ask dev-libs/amdgpu-pro-opencl     //安装闭源官方AMD显卡驱动
# systemctl enable gdm.service
卸载OpenRC引导程序：
# emerge --ask --unmerge openrc
# echo "=sys-apps/openrc-0.32.1" >> /etc/portage/package.mask     //屏蔽Openrc禁止重新安装
=============================================================================================================
# nano -w /etc/X11/xorg.conf.d/20-amdgpu.conf
=============================================================================================================
Section "Device"
    Identifier "AMD"
    Driver "amdgpu"
    Option "DRI" "3"
    Option "TearFree" "true"
EndSection
=============================================================================================================
安装第三方源工具：
# emerge --ask app-portage/layman
# layman -L && layman -a gentoo-zh
# emerge --sync
安装ibus智能拼音输入法：
# emerge --ask app-i18n/ibus-table      //安装中文框架
# emerge --ask app-i18n/ibus-table-chinese      //安装中文框架
# emerge --ask app-i18n/ibus-libpinyin      //安装智能拼音输入法
# emerge --ask app-i18n/ibus-rime     //安装五笔等输入法
# emerge --ask dev-lang/go      //安装Go编程语言
=============================================================================================================
安装常用工具：
# emerge --ask media-gfx/gnome-font-viewer    //字体查看和安装
# emerge --ask app-arch/file-roller    //归档管理器
# emerge --ask sys-apps/gnome-disk-utility    //磁盘管理器
# emerge --ask app-crypt/seahorse    //密码与密钥
# emerge --ask gnome-extra/gnome-system-monitor    //系统监视器
# emerge --ask media-gfx/gnome-screenshot     //截图工具
# emerge --ask media-gfx/shotwell     //图片查看器
# emerge --ask app-editors/vim     //安装代码编辑器
# emerge --ask app-editors/gedit     //安装代码编辑器
# emerge --ask app-office/wps-office     //安装WPS办公套件
清理系统常用命令：
# emerge --depclean     //清楚孤立的软件包
# rm -f /usr/portage/distfiles/*     //删除下载目录下的文件
# rm -f /root/.bash_history      //删除历史终端记录
安装Virt-Manager虚拟机管理软件：
# echo ">=net-misc/spice-gtk-0.31 usbredir" >> /etc/portage/package.use
# echo ">=app-emulation/libvirt-2.1.0-r2 virt-network xen" >> /etc/portage/package.use
# echo ">=app-emulation/qemu-2.7.0-r5 spice usbredir xen nfs xfs virtfs virgl" >> /etc/portage/package.use
# echo ">=net-dns/dnsmasq-2.76 script" >> /etc/portage/package.use
# echo ">=x11-drivers/xf86-video-qxl-0.1.4 xspice" >> /etc/portage/package.use
# emerge --ask app-emulation/virt-manager     //虚拟机管理器
# emerge --ask x11-drivers/xf86-video-qxl     //安装KVM显示驱动
# systemctl enable libvirtd.service    //默认启动虚拟机守护进程
=============================================================================================================
设置Virt-Manager镜像安装位置：
# mkdir /home/libvirt
# mkdir /home/libvirt/images
# rm -rf /var/lib/libvirt/images
# ln -s /home/libvirt/images /var/lib/libvirt/images
# vim /etc/libvirt/storage/default.xml
=============================================================================================================
/home/libvirt/images     //将images对应的目录修改即可
=============================================================================================================
配置桥接网络：
# emerge --ask net-misc/bridge-utils    //安装桥接工具
# brctl addbr vnet0    //创建虚拟网卡
# brctl addif vnet0 enp0s31f6    //绑定硬件网卡到虚拟网卡
# brctl stp vnet0 on    //开启STP服务
# brctl show    //查看桥接网络（需如下所示方可继续下面步骤）
=============================================================================================================
bridge name    bridge id            STP enabled    interfaces
vnet0          8000.f2e0c273a468    yes            enp0s31f6
=============================================================================================================
# vim /etc/systemd/network/MyBridge.netdev
=============================================================================================================
[NetDev]
Name=vnet0
Kind=bridge
=============================================================================================================
# vim /etc/systemd/network/MyEth.network
=============================================================================================================
[Match]
Name=enp0s31f6

[Network]
Bridge=vnet0
=============================================================================================================
# vim /etc/systemd/network/MyBridge.network    //两个配置相同，可选:【DHCP=v4】替换[Network]下面三行
# vim /etc/systemd/network/50-dhcp.network    //本地网络和虚拟网络都让桥接来分配IP地址
=============================================================================================================
[Match]
Name=vnet0

[Network]
DNS=192.168.2.1
Address=192.168.2.20/30     //20到30是桥接分配IP范围，20必需与原配本地IP一致。
Gateway=192.168.2.1
==================================================================================================================
安装Flatpak环境：
$ sudo mkdir /var/lib/layman/flatpak-overlay
$ sudo vim /etc/portage/repos.conf/flatpak-overlay.conf
==================================================================================================================
[flatpak-overlay]
priority = 50
location = /var/lib/layman/flatpak-overlay
sync-type = git
sync-uri = https://github.com/fosero/flatpak-overlay.git
auto-sync = Yes
==================================================================================================================
$ sudo emerge --sync
$ sudo emerge --ask sys-apps/flatpak
$ sudo systemctl start flatpak-system-helper.service
$ sudo systemctl enable flatpak-system-helper.service
$ sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
$ sudo flatpak install flathub io.github.jliljebl.Flowblade
==================================================================================================================
安装PHP环境：
# echo ">=dev-lang/php-7.0.15 xmlreader xmlwriter zip mysqli fpm cgi -truetype -exif" >> /etc/portage/package.use
# emerge --ask dev-lang/php    //安装PHP编程语言
# systemctl start php-fpm@7.0.service      //启动PHP-FPM服务
# systemctl enable php-fpm@7.0.service      //开机启动PHP-FPM服务
# emerge --ask www-servers/nginx     //安装HTTP服务器
# systemctl start nginx.service      //启动HTTP服务器
# systemctl enable nginx.service      //开机启动HTTP服务器
# vim /etc/nginx/nginx.conf
==================================================================================================================
server {
    listen 80;
    server_name localhost;

    access_log /var/log/nginx/localhost.access_log main;
    error_log /var/log/nginx/localhost.error_log info;

    root /home/lhjok/work/www;
    index index.html index.php;

    location ~ .php$ {
        fastcgi_pass 127.0.0.1:9000;
        include fastcgi.conf;
    }
}
==================================================================================================================
# emerge --ask dev-db/mysql      //安装MySQL数据库
# emerge --config dev-db/mysql      //初始化MySQL数据库
# mysql_secure_installation      //设置MySQL数据库
# systemctl start mysqld.service      //启动MySQL数据库
# systemctl enable mysqld.service      //开机启动MySQL数据库
==================================================================================================================
编译错误的解决方法：
出现这类问题，一般是库依赖问题，或者版本支持问题。
1，尽量找出被依赖的库并安装，或者执行：# emerge --depclean     //审查并安装依赖关系。
2，依赖的版本问题，如Python脚本语言的版本，只需要添加USE变量即可，如下：（选择的是python2_7）
USE="python_single_target_python2_7 -python_single_target_python3_4"
3，全局USE设置会导致依赖冲突和依赖导致的编译错误，大多数让人头痛的问题都来源于这里。
==================================================================================================================
解决系统时间不同步问题（同步网络时间）：
# emerge --ask net-misc/ntp     //网络时间同步工具（备用）
# ntpdate time.windows.com     //同步网络时间（备用）
==================================================================================================================
Emacs补全配置备忘(1)：
git clone https://github.com/Valloric/ycmd.git .ycmd
cd .ycmd
git submodule update --init --recursive
./build.py --help     //(备选项)查看构建选项。
./build.py --rust-completer --build-dir BUILD_DIR
==================================================================================================================
Emacs补全配置备忘(2)：
sudo ln -s ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src /home/src
rustup update
rustup install nightly
cargo +nightly install racer
==================================================================================================================
# systemctl enable systemd-timesyncd.service
# systemctl start systemd-timesyncd.service
# timedatectl set-timezone Asia/Shanghai     //设置中国上海时区
# timedatectl set-local-rtc 0     //要将硬件时钟设置为当前系统时钟（UTC时间标准）
# timedatectl set-ntp 1     //启用网络时间同步
==================================================================================================================